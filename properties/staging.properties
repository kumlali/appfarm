# ------------------------------------------------------------------------------
# Each domain (dev, test, qa, prod etc.) has its own property file that contains
# application and domain specific configuration items.
#
# Application and domain specific configuration files are generated from 
# '*.template' files by Ant script. 
#
# While generation, placeholders in '*.template' files(e.g. @replace_me@) are 
# replaced by actual values from property files. Generated files have the same
# name with the templates, but '.template' extension is removed.
#
# Note: Some configuration items in this property file are directly referenced
# by Ant script (build.xml). They are not used while configuration file 
# generation.
# ------------------------------------------------------------------------------

# ==============================================================================
# farm.conf 
#
# Note: Some variables such as CONF_APP_NAME and CONF_APP_HOME are also used by 
# Ant script (build.xml).
# ==============================================================================


# ------------------------------------------------------------------------------
# Application's name. Instance names are generated from this. For example, if
# application name is 'myapp', instance names become 'myapp1', 'myapp2', etc.
# ------------------------------------------------------------------------------
CONF_APP_NAME=myapp


# ------------------------------------------------------------------------------
# Path to directory in which the farm is installed.
# ------------------------------------------------------------------------------
CONF_APP_HOME=/opt/myproject/${CONF_APP_NAME}


# ------------------------------------------------------------------------------
# Domain's name. Each domain (dev, test, qa, prod etc.) has its own
# '*.properties' file (dev.properties, test.properties, etc.)
# ------------------------------------------------------------------------------
CONF_DOMAIN_NAME=staging


# ------------------------------------------------------------------------------
# Contains domain topology and conforms to the following structure:
#
#   CONF_NODE_INSTANCES=node1:instance1,instance2,instance3;\
#                       node2:instance4,instance5,instance6;\
#                       node3:instance7,instance8,instance9
#
# In this structure;
# * nodes are separeted by ';'
# * node name and instances running on it are separated by ':'
# * instances are separeted by ','
#
# When a new node or instance is added or removed, CONF_NODE_INSTANCES must be
# updated on all the nodes.
# ------------------------------------------------------------------------------
CONF_NODE_INSTANCES=staginghost:${CONF_APP_NAME}1,${CONF_APP_NAME}2;


# ------------------------------------------------------------------------------
# Applications and their instances might coexist on the same host and all 
# the instances of each application must have unique ports to prevent port 
# conflicts. Therefore, we use unique 'CONF_BASE_PORT' for each application. 
# 
# Unique instance ports are automatically generated from 'CONF_BASE_PORT' and
# instance id(extracted from instance name). Therefore, multiple
# instances of the same or different applications can coexist on the same host.
# 
# Two ports are used for each instance: Application and admin. They are 
# automatically generated  from 'CONF_BASE_PORT' and instance id:
#
#   APPLICATION_PORT = CONF_BASE_PORT + (2 * instance_id) - 1
#   ADMIN_PORT       = CONF_BASE_PORT + (2 * instance_id)
#
# For example, if CONF_APP_NAME is myapp and CONF_BASE_PORT is 8000 then;
#  - instance myapp1's application port is 8001, admin port is 8002.
#  - instance myapp2's application port is 8003, admin port is 8004.
#  - ...
# ------------------------------------------------------------------------------
CONF_BASE_PORT=8000


# ------------------------------------------------------------------------------
# Home of the Java that is used while starting the instance(application).
#
# Although we might have default Java installation on the host, we might
# specifically use another one residing in 'CONF_JAVA_HOME'.
# ------------------------------------------------------------------------------
CONF_JAVA_HOME=/usr


# ------------------------------------------------------------------------------
# CONF_JAVA_OPTS and CONF_APP_ARGS can be used to configure the application
# from command line. JVM options are added to CONF_JAVA_OPTS while application
# arguments are added to CONF_APP_ARGS.
#
# 'Instance specific' configuration, such as port and log file path, can be
# added to farm.conf's CONF_JAVA_OPTS and/or CONF_APP_ARGS. Instance
# specific variables, such as INSTANCE_NAME, APPLICATION_PORT and ADMIN_PORT,
# can be used in CONF_JAVA_OPTS and CONF_APP_ARGS. Therefore, it is possible
# to define instance specific configuration in <domain>.properties files that 
# will later be added to farm.conf while deployment package creation.
#
# JVM options can be added to CONF_JAVA_OPTS:
#
#   CONF_JAVA_OPTS=-server \
#                  -showversion \
#                  -DinstanceName=${INSTANCE_NAME} \
#                  -Djava.awt.headless=true \
#                  -XX:+HeapDumpOnOutOfMemoryError \
#                  -XX:HeapDumpPath=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.java_pid.hprof \
#                  -XX:ErrorFile=${INSTANCE_HOME}/logs/${INSTANCE_NAME}/hs_err_pid.log \
#                  -verbose:gc -Xloggc:${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.gc.log \
#                  -Djava.security.egd=file:/dev/./urandom \
#                  -Djdk.tls.client.protocols=TLSv1.1,TLSv1.2 \
#                  -Dhttps.protocols=TLSv1.1,TLSv1.2 \
#                  -Xms1024m \
#                  -Xmx1024m
#
# Frameworks, such as Dropwizard and Springboot, can be configured via JVM
# options:
# 
#   # For Dropwizard
#   CONF_JAVA_OPTS=
#                  ...
#
#                  -Ddw.server.applicationConnectors[0].port=${APPLICATION_PORT} \
#                  -Ddw.server.applicationConnectors[0].keyStorePath=${CONF_APP_HOME}/certs/keystore.jks \
#                  -Ddw.server.applicationConnectors[0].trustStorePath=${CONF_APP_HOME}/certs/truststore.jks \
#                  -Ddw.server.adminConnectors[0].port=${ADMIN_PORT} \
#                  -Ddw.server.adminConnectors[0].keyStorePath=${CONF_APP_HOME}/certs/keystore.jks \
#                  -Ddw.server.adminConnectors[0].trustStorePath=${CONF_APP_HOME}/certs/truststore.jks \
#                  -Ddw.logging.appenders[0].currentLogFilename=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log \
#                  -Ddw.logging.appenders[0].archivedLogFilenamePattern=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log-%i.log.gz \
#                  -Ddw.logging.appenders[1].originHost=${HOSTNAME}
#
#   # For Springboot 
#   #
#   # Advanced logging features such as sending logs to Graylog via logback
#   # requires logback.xml. We can configure logback.xml via CONF_JAVA_OPTS, 
#   # though.
#   CONF_JAVA_OPTS=
#                  ...
#                  -Dserver.port=${APPLICATION_PORT} \
#                  -Dserver.ssl.key-store=${CONF_APP_HOME}/certs/keystore.jks \
#                  -Dserver.ssl.trust-store=${CONF_APP_HOME}/certs/truststore.jks \
#                  -Dlogging.config=/mw/vedo/report-service/conf/logback.xml \
#                  -Dlogging.file=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log 
#                  -Dlogging.appenders.gelf.originHost=${HOSTNAME}
#
# Application arguments, on the other hand, can be added to CONF_APP_ARGS. 
#
#   # For Dropwizard
#   CONF_APP_ARGS=server ${CONF_APP_HOME}/conf/config.yml
#
#   # For Springboot
#   CONF_APP_ARGS=--spring.config.location=${CONF_APP_HOME}/conf
#
# ------------------------------------------------------------------------------
# Dropwizard
CONF_JAVA_OPTS=-server \
               -showversion \
               -DinstanceName=${INSTANCE_NAME} \
               -Djava.awt.headless=true \
               -XX:+HeapDumpOnOutOfMemoryError \
               -XX:HeapDumpPath=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.java_pid.hprof \
               -XX:ErrorFile=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}/hs_err_pid.log \
               -verbose:gc \
               -Xloggc:${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.gc.log \
               -Djava.security.egd=file:/dev/./urandom \
               -Djdk.tls.client.protocols=TLSv1.1,TLSv1.2 \
               -Dhttps.protocols=TLSv1.1,TLSv1.2 \
               -Ddw.server.applicationConnectors[0].port=${APPLICATION_PORT} \
               -Ddw.server.applicationConnectors[0].keyStorePath=${CONF_APP_HOME}/certs/keystore.jks \
               -Ddw.server.applicationConnectors[0].trustStorePath=${CONF_APP_HOME}/certs/truststore.jks \
               -Ddw.server.adminConnectors[0].port=${ADMIN_PORT} \
               -Ddw.server.adminConnectors[0].keyStorePath=${CONF_APP_HOME}/certs/keystore.jks \
               -Ddw.server.adminConnectors[0].trustStorePath=${CONF_APP_HOME}/certs/truststore.jks \
               -Ddw.logging.appenders[0].currentLogFilename=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log \
               -Ddw.logging.appenders[0].archivedLogFilenamePattern=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}-%i.log.gz \
               -Ddw.logging.appenders[1].originHost=${HOSTNAME}
               
# Springboot
# CONF_JAVA_OPTS=-server \
#                -showversion \
#                -DinstanceName=${INSTANCE_NAME} \
#                -Djava.awt.headless=true \
#                -XX:+HeapDumpOnOutOfMemoryError \
#                -XX:HeapDumpPath=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.java_pid.hprof \
#                -XX:ErrorFile=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}/hs_err_pid.log \
#                -verbose:gc \
#                -Xloggc:${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.gc.log \
#                -Djava.security.egd=file:/dev/./urandom \
#                -Djdk.tls.client.protocols=TLSv1.1,TLSv1.2 \
#                -Dhttps.protocols=TLSv1.1,TLSv1.2 \
#                -Dserver.port=${APPLICATION_PORT} \
#                -Dserver.ssl.key-store=${CONF_APP_HOME}/certs/keystore.jks \
#                -Dserver.ssl.trust-store=${CONF_APP_HOME}/certs/truststore.jks \
#                -Dlogging.config=/mw/vedo/report-service/conf/logback.xml \
#                -Dlogging.file=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log \
#                -Dlogging.appenders.gelf.originHost=${HOSTNAME}

# Dropwizard
CONF_APP_ARGS=server ${CONF_APP_HOME}/conf/config.yml

# Springboot
# CONF_APP_ARGS=--spring.config.location=${CONF_APP_HOME}/conf


# ------------------------------------------------------------------------------
# These variables are used to make sure the instance is started or stopped
# successfully.
#
# When 'start-verify' command of 'instance.sh' is executed, the process
# continues until 'CONF_STARTUP_SUCCESS_MSG' or 'CONF_STARTUP_FAILURE_MSG'
# is seen on the logs. 'start-verify' fails if logs;
#  - contain 'CONF_STARTUP_FAILURE_MSG' or
#  - do not contain 'CONF_STARTUP_SUCCESS_MSG' in 'CONF_STARTUP_TIMEOUT_SECONDS'
#    seconds.
#
# Similarly, if stopping does not complete in 'CONF_SHUTDOWN_TIMEOUT_SECONDS'
# seconds, the process is killed.
#
# Logs are checked every 'CONF_WAIT_INTERVAL_SECONDS' seconds till command
# fails or succeeds.
# ------------------------------------------------------------------------------
CONF_STARTUP_SUCCESS_MSG=o.e.j.s.Server -  Started
# TODO: What is the startup failure message of the application?
CONF_STARTUP_FAILURE_MSG=Cannot start server
CONF_STARTUP_TIMEOUT_SECONDS=60
CONF_SHUTDOWN_TIMEOUT_SECONDS=30
CONF_WAIT_INTERVAL_SECONDS=3


# ------------------------------------------------------------------------------
# High availability (HA) is a must for many applications. Those applications
# must be available while restarting application servers or deploying
# applications. To achieve this, when an operation is completed on a node,
# it is executed on the next node after 'CONF_SERIAL_DOMAIN_OPERATIONS_WAIT_INTERVAL_SECONDS'
# seconds. This behaviour allows load balancer to recognize the node
# is alive again before the next one is getting down.
#
# Note: Commands having '-ha' suffix are considered to support high availability.
# ------------------------------------------------------------------------------
CONF_SERIAL_DOMAIN_OPERATIONS_WAIT_INTERVAL_SECONDS=30



# ==============================================================================
# build.xml (Ant config)
#
# Note: These variables are not used while configuration file generation. They
# are, instead, directly referenced by Ant script (build.xml).
# ==============================================================================
build.ssh.user=appfarm

# Flyway configuration
# JDBC driver must be in classpath.
build.flyway.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=stagingdbhost)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=MYAPP.MYCOMPANY.COM)))
build.flyway.user=FLYWAYUSER
build.flyway.pass=FLYWAYPASS
build.flyway.schemas=FLYWAY
build.flyway.table=SCHEMA_VERSION_MYAPP
build.flyway.driver=oracle.jdbc.OracleDriver
build.flyway.encoding=ISO_8859-1



# ==============================================================================
# Application config - Dropwizard config.yml or Springboot application.yml
# ==============================================================================
accountServiceRestApiUrl=https://myprojectstaging.mycompany.com/account
statisticsServiceRestApiUrl=https://myprojectstaging.mycompany.com/statistics
notificationServiceRestApiUrl=https://myprojectstaging.mycompany.com/notification

server.application.https.keyStorePassword=y@4Q6TpxGJGKz+mx
server.application.https.trustStorePassword=y@4Q6TpxGJGKz+mx
server.admin.https.keyStorePassword=y@4Q6TpxGJGKz+mx
server.admin.https.trustStorePassword=y@4Q6TpxGJGKz+mx

database.driverClass=oracle.jdbc.driver.OracleDriver
database.url=jdbc:oracle:thin:@stagingdbhost:1521/MYAPP.MYCOMPANY.COM
database.user=MYAPP
database.password=myappPa$$w0rD
database.validationQuery=SELECT 1 FROM DUAL

logging.appenders.gelf.host=graylog.mycompany.local
logging.appenders.gelf.port=12215
logging.appenders.gelf.facility=myproject