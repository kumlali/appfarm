# ------------------------------------------------------------------------------
# WARNING: This file might be overriden while deployment.
# ------------------------------------------------------------------------------
# Contains configuration items used by management scripts in 'bin' directory.
#
# All the nodes must have the same 'farm.conf'.
#
# 'farm.conf' is generated from 'farm.conf.template' by Ant script. Data comes
# from *.properties files. Each domain (dev, test, qa, prod etc.) has its own
# *.properties file (dev.properties, test.properties, etc.)
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Application's name. Instance names are generated from this. For example, if
# application name is 'myapp', instance names become 'myapp1', 'myapp2', etc.
# ------------------------------------------------------------------------------
CONF_APP_NAME="@CONF_APP_NAME@"


# ------------------------------------------------------------------------------
# Path to directory in which the farm is installed.
# ------------------------------------------------------------------------------
CONF_APP_HOME="@CONF_APP_HOME@"


# ------------------------------------------------------------------------------
# Domain's name. Each domain (dev, test, qa, prod etc.) has its own
# '*.properties' file (dev.properties, test.properties, etc.)
# ------------------------------------------------------------------------------
CONF_DOMAIN_NAME="@CONF_DOMAIN_NAME@"


# ------------------------------------------------------------------------------
# Contains domain topology and conforms to the following structure:
#
#   CONF_NODE_INSTANCES=node1:instance1,instance2,instance3;\
#                       node2:instance4,instance5,instance6;\
#                       node3:instance7,instance8,instance9
#
# In this structure; 
# * nodes are separeted by ';'
# * node name and instances running on it are separated by ':'
# * instances are separeted by ','
#
# When a new node or instance is added or removed, CONF_NODE_INSTANCES must be
# updated on all the nodes.
# ------------------------------------------------------------------------------
CONF_NODE_INSTANCES="@CONF_NODE_INSTANCES@"


# ------------------------------------------------------------------------------
# Applications and their instances might coexist on the same host and all 
# the instances of each application must have unique ports to prevent port 
# conflicts. Therefore, we use unique 'CONF_BASE_PORT' for each application.
# 
# Unique instance ports are automatically generated from 'CONF_BASE_PORT' and
# instance id(extracted from instance name). Therefore, multiple
# instances of the same or different applications can coexist on the same host.
# 
# Two ports are used for each instance: Application and admin. They are 
# automatically generated  from 'CONF_BASE_PORT' and instance id:
#
#   APPLICATION_PORT = CONF_BASE_PORT + (2 * instance_id) - 1
#   ADMIN_PORT       = CONF_BASE_PORT + (2 * instance_id)
#
# For example, if CONF_APP_NAME is myapp and CONF_BASE_PORT is 8000 then;
#  - instance myapp1's application port is 8001, admin port is 8002.
#  - instance myapp2's application port is 8003, admin port is 8004.
#  - ...
# ------------------------------------------------------------------------------
CONF_BASE_PORT="@CONF_BASE_PORT@"


# ------------------------------------------------------------------------------
# Home of the Java that is used while starting the instance(application).
#
# Although we might have default Java installation on the host, we might
# specifically use another one residing in 'CONF_JAVA_HOME'.
# ------------------------------------------------------------------------------
CONF_JAVA_HOME="@CONF_JAVA_HOME@"


# ------------------------------------------------------------------------------
# CONF_JAVA_OPTS and CONF_APP_ARGS can be used to configure the application
# from command line. JVM options are added to CONF_JAVA_OPTS while application
# arguments are added to CONF_APP_ARGS.
#
# 'Instance specific' configuration, such as port and log file path, can be
# added to farm.conf's CONF_JAVA_OPTS and/or CONF_APP_ARGS. Instance
# specific variables, such as INSTANCE_NAME, APPLICATION_PORT and ADMIN_PORT,
# can be used in CONF_JAVA_OPTS and CONF_APP_ARGS. Therefore, it is possible
# to define instance specific configuration in <domain>.properties files that 
# will later be added to farm.conf while deployment package creation.
#
# JVM options can be added to CONF_JAVA_OPTS:
#
#   CONF_JAVA_OPTS=-server \
#                  -showversion \
#                  -DinstanceName=${INSTANCE_NAME} \
#                  -Djava.awt.headless=true \
#                  -XX:+HeapDumpOnOutOfMemoryError \
#                  -XX:HeapDumpPath=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.java_pid.hprof \
#                  -XX:ErrorFile=${INSTANCE_HOME}/logs/${INSTANCE_NAME}/hs_err_pid.log \
#                  -verbose:gc -Xloggc:${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.gc.log \
#                  -Djava.security.egd=file:/dev/./urandom \
#                  -Djdk.tls.client.protocols=TLSv1.1,TLSv1.2 \
#                  -Dhttps.protocols=TLSv1.1,TLSv1.2 \
#                  -Xms1024m \
#                  -Xmx1024m
#
# Frameworks, such as Dropwizard and Springboot, can be configured via JVM
# options:
# 
#   # For Dropwizard
#   CONF_JAVA_OPTS=
#                  ...
#
#                  -Ddw.server.applicationConnectors[0].port=${APPLICATION_PORT} \
#                  -Ddw.server.applicationConnectors[0].keyStorePath=${CONF_APP_HOME}/certs/keystore.jks \
#                  -Ddw.server.applicationConnectors[0].trustStorePath=${CONF_APP_HOME}/certs/truststore.jks \
#                  -Ddw.server.adminConnectors[0].port=${ADMIN_PORT} \
#                  -Ddw.server.adminConnectors[0].keyStorePath=${CONF_APP_HOME}/certs/keystore.jks \
#                  -Ddw.server.adminConnectors[0].trustStorePath=${CONF_APP_HOME}/certs/truststore.jks \
#                  -Ddw.logging.appenders[0].currentLogFilename=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log \
#                  -Ddw.logging.appenders[0].archivedLogFilenamePattern=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log-%i.log.gz \
#                  -Ddw.logging.appenders[1].originHost=${HOSTNAME}
#
#   # For Springboot 
#   #
#   # Advanced logging features such as sending logs to Graylog via logback
#   # requires logback.xml. We can configure logback.xml via CONF_JAVA_OPTS, 
#   # though.
#   CONF_JAVA_OPTS=
#                  ...
#                  -Dserver.port=${APPLICATION_PORT} \
#                  -Dserver.ssl.key-store=${CONF_APP_HOME}/certs/keystore.jks \
#                  -Dserver.ssl.trust-store=${CONF_APP_HOME}/certs/truststore.jks \
#                  -Dlogging.config=/mw/vedo/report-service/conf/logback.xml \
#                  -Dlogging.file=${CONF_APP_HOME}/instances/${INSTANCE_NAME}/logs/${INSTANCE_NAME}.log 
#                  -Dlogging.appenders.gelf.originHost=${HOSTNAME}
#
# Application arguments, on the other hand, can be added to CONF_APP_ARGS. 
#
#   # For Dropwizard
#   CONF_APP_ARGS=server ${CONF_APP_HOME}/conf/config.yml
#
#   # For Springboot
#   CONF_APP_ARGS=--spring.config.location=${CONF_APP_HOME}/conf
#
# ------------------------------------------------------------------------------
CONF_JAVA_OPTS="@CONF_JAVA_OPTS@"

CONF_APP_ARGS="@CONF_APP_ARGS@"


# ------------------------------------------------------------------------------
# These variables are used to make sure the instance is started or stopped
# successfully.
#
# When 'start-verify' command of 'instance.sh' is executed, the process
# continues until 'CONF_STARTUP_SUCCESS_MSG' or 'CONF_STARTUP_FAILURE_MSG'
# is seen on the logs. 'start-verify' fails if logs;
#  - contain 'CONF_STARTUP_FAILURE_MSG' or
#  - do not contain 'CONF_STARTUP_SUCCESS_MSG' in 'CONF_STARTUP_TIMEOUT_SECONDS'
#    seconds.
#
# Similarly, if stopping does not complete in 'CONF_SHUTDOWN_TIMEOUT_SECONDS'
# seconds, the process is killed.
#
# Logs are checked every 'CONF_WAIT_INTERVAL_SECONDS' seconds till command
# fails or succeeds.
# ------------------------------------------------------------------------------
CONF_STARTUP_SUCCESS_MSG="@CONF_STARTUP_SUCCESS_MSG@"
CONF_STARTUP_FAILURE_MSG="@CONF_STARTUP_FAILURE_MSG@"
CONF_STARTUP_TIMEOUT_SECONDS="@CONF_STARTUP_TIMEOUT_SECONDS@"
CONF_SHUTDOWN_TIMEOUT_SECONDS="@CONF_SHUTDOWN_TIMEOUT_SECONDS@"
CONF_WAIT_INTERVAL_SECONDS="@CONF_WAIT_INTERVAL_SECONDS@"


# ------------------------------------------------------------------------------
# High availability (HA) is a must for many applications. Those applications
# must be available while restarting application servers or deploying
# applications. To achieve this, when an operation is completed on a node,
# it is executed on the next node after 'CONF_SERIAL_DOMAIN_OPERATIONS_WAIT_INTERVAL_SECONDS'
# seconds. This behaviour allows load balancer to recognize the node
# is alive again before the next one is getting down.
#
# Note: Commands having '-ha' suffix are considered to support high availability.
# ------------------------------------------------------------------------------
CONF_SERIAL_DOMAIN_OPERATIONS_WAIT_INTERVAL_SECONDS="@CONF_SERIAL_DOMAIN_OPERATIONS_WAIT_INTERVAL_SECONDS@"